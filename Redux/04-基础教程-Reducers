![reducer](https://images-na.ssl-images-amazon.com/images/I/A1edVtIyS2L._SX342_.jpg)
Reducer确立应用state（状态）发生变化时，action怎么样发送数据至store。记住action只描述发生过了什么，不描述应用state怎么变。
## 设计state结构
在Redux中，所有应用的state都存在一个单一的对象中。所以写点代码之前最好考虑下结构。怎样以最小的表现形式来描述你应用的state？  
对我们的todo应用来说，我们需要存两样东西:
- 当前选择的visibility filter（可见性过滤器）
- 实际的计划项列表
你常需要存一些数据，以及UI状态至state树。这很正常，不过最好将数据和UI状态分离。
```
{
  visibilityFilter: 'SHOW_ALL',
  todos: [
    {
      text: 'Consider using Redux',
      completed: true
    },
    {
      text: 'Keep all state in a single tree',
      completed: false
    }
  ]
}
```
> 在更复杂的应用中，你需要不同的实体互相访问。我们建议将你的state尽可能不要有嵌套。保证每个对象中的实体有一个ID作为键值，用这个ID来指向这个实体。
这种方法在[普通化](https://github.com/paularmstrong/normalizr)文档中有具体描述。比如示例应用中，在state中设置`todosById: { id -> todo }`和
`todos: array<id>`会更好，但在这个教程中我们希望描述得尽可能简单一些。

